basePath: /api
definitions:
  dao.Event:
    properties:
      description:
        type: string
      event_time:
        type: string
      location:
        type: string
      name:
        type: string
    required:
    - description
    - event_time
    - location
    - name
    type: object
  dao.EventResponse:
    properties:
      description:
        type: string
      event_time:
        type: string
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      user_id:
        type: integer
    type: object
  dao.User:
    properties:
      email:
        type: string
      password:
        type: string
      role_id:
        type: integer
    required:
    - password
    type: object
  dao.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      role_id:
        type: integer
    type: object
  dto.ApiResponse-any:
    properties:
      data: {}
      response_key:
        type: string
      response_message:
        type: string
    type: object
  dto.ApiResponse-array_dao_EventResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dao.EventResponse'
        type: array
      response_key:
        type: string
      response_message:
        type: string
    type: object
  dto.ApiResponse-array_dao_UserResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dao.UserResponse'
        type: array
      response_key:
        type: string
      response_message:
        type: string
    type: object
  dto.ApiResponse-array_string:
    properties:
      data:
        items:
          type: string
        type: array
      response_key:
        type: string
      response_message:
        type: string
    type: object
  dto.ApiResponse-dao_EventResponse:
    properties:
      data:
        $ref: '#/definitions/dao.EventResponse'
      response_key:
        type: string
      response_message:
        type: string
    type: object
  dto.ApiResponse-dao_UserResponse:
    properties:
      data:
        $ref: '#/definitions/dao.UserResponse'
      response_key:
        type: string
      response_message:
        type: string
    type: object
  dto.ApiResponse-string:
    properties:
      data:
        type: string
      response_key:
        type: string
      response_message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: devonchou
    url: https://github.com/devonchou
  description: event-booking-api swagger doc
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: event-booking-api swagger doc
  version: "1.0"
paths:
  /events:
    get:
      description: Retrieve a list of events
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.ApiResponse-array_dao_EventResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
      summary: Get all events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Create a new event with the provided data. Requires JWT authentication.
      parameters:
      - description: Event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/dao.Event'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ApiResponse-dao_EventResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
      security:
      - BearerAuth: []
      summary: Create a new event
      tags:
      - events
  /events/{id}:
    delete:
      description: Delete a specific event by its ID. Requires JWT authentication.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
      security:
      - BearerAuth: []
      summary: Delete event by ID
      tags:
      - events
    get:
      description: Retrieve a specific event by its ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.ApiResponse-dao_EventResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
      summary: Get event by ID
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Update an event with the provided data. Requires JWT authentication.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/dao.Event'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.ApiResponse-dao_EventResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
      security:
      - BearerAuth: []
      summary: Update event by ID
      tags:
      - events
  /events/{id}/attendees:
    get:
      description: Retrieve a list of event attendees email. Requires JWT authentication.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.ApiResponse-array_string'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
      security:
      - BearerAuth: []
      summary: Get all event attendees email
      tags:
      - events
  /events/{id}/register:
    delete:
      description: Unregister user for a specific event by its ID. Requires JWT authentication.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
      security:
      - BearerAuth: []
      summary: Unregister user for a specific event
      tags:
      - events
    post:
      description: Register user for a specific event by its ID. Requires JWT authentication.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
      security:
      - BearerAuth: []
      summary: Register user for a specific event
      tags:
      - events
  /users:
    get:
      description: Retrieve a list of users. Admin only. Requires JWT authentication.
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.ApiResponse-array_dao_UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided data
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dao.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ApiResponse-dao_UserResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete a specific user by its ID. Requires JWT authentication.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
      security:
      - BearerAuth: []
      summary: Delete user by ID
      tags:
      - users
    get:
      description: Retrieve a specific user by its ID. Requires JWT authentication.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.ApiResponse-dao_UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an user with the provided data. Requires JWT authentication.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dao.User'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.ApiResponse-dao_UserResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with the provided credentials and return a
        JWT token
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dao.User'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/dto.ApiResponse-string'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ApiResponse-any'
      summary: Authenticate a user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
